#!/usr/bin/env bash
# {{{ Define file locations and internal arrays.

# location nvims reads and writes its configuration files.
readonly nvimscfg="$HOME/.config/nvims"

# Custom neovim distribution nvims can bootstrap.
readonly neovimDistros=$nvimscfg/neovim_distros

# nvims writes aliases nvim-{disto} names it has installed.
# You should source this file from your shell to have immediate access to the
# aliases nvims creates.
readonly nvimAppNameFile=$nvimscfg/nvim_appnames

# nvims allows one to configure a default distribution.
readonly defaultNeovimDistro=$nvimscfg/nvim_default_app

# nvapp names extracted from neovim_distros array.
nvapps=()

# -------------------------------------------------------------------------- }}}
# {{{ Source configuration files.

sourceFiles() {
  [[ ! -f $neovimDistros ]] && echo "Missing $neovimDistros" && exit
  source "$neovimDistros"
}

# -------------------------------------------------------------------------- }}}
# {{{ Determine if a pull is needed.

# shellcheck disable=SC2120
gitcheck() {

  # Git variables used to determine if a pull is needed.
  git fetch
  upstream=${1:-'@{u}'}
  local=$(git rev-parse @)
  remote=$(git rev-parse "$upstream")
  base=$(git merge-base @ "$upstream")

  if [[ "$local" == "$remote" ]]; then
    echo "Up-to-date"
  elif [[ "$remote" == "$base" ]]; then
    echo "Need-to-Push"
  elif [[ "$local" == "$base" ]]; then
    echo "Need-to-Pull"
  else
    echo "Diverged"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Remove all spaces from parameter 1.

removeSpaces() {
  var="$(echo -e "$1" | tr -d '[:space:]')"
  echo "$var"
}

# -------------------------------------------------------------------------- }}}
# {{{ Extract fields from neovim_app array.

buildNeovimAppArray() {
  for fields in "${neovim_distros[@]}"; do
    IFS=$'|' read -r alias _url _branch <<<"$fields"
    alias="$(removeSpaces "$alias")"
    nvapps+=("$alias")
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ Clone or Pull selected nvapp

cloneOrPullNeovimApp() {
  local choice="$1"
  for fields in "${neovim_distros[@]}"; do
    IFS=$'|' read -r alias url branch <<<"$fields"

    alias="$(removeSpaces "$alias")"
    if [[ "$choice" == "$alias" ]]; then
      url="$(removeSpaces "$url")"
      branch="$(removeSpaces "$branch")"
      location=$HOME/.config/nvim-$alias
      if [[ -d "$location" ]]; then
        echo "Pulling $alias to $location"
        pullRepository "$alias"
      else
        echo "Cloning $alias to $location"
        cloneRepository "$alias" "$url" "$branch"
      fi
      return
    fi
  done
}

# --------------------------------------------------------------------------}}}
# {{{ Set default configuration

setDefaultNvimApp() {
  local choice="$1"
  echo "$choice" >"$defaultNeovimDistro"
}

# -------------------------------------------------------------------------- }}}
# {{{ Pull repository

pullRepository() {
  alias="$1"
  location="$HOME/.config/nvim-$alias"
  runCommandFromDirectory "$location" "git pull"

}

# -------------------------------------------------------------------------- }}}
# {{{ Clone Repository

cloneRepository() {
  alias="$1"
  url="$2"
  branch="$3"
  location="$HOME/.config/nvim-$alias"

  # Clear clone depth when a branch is needed.
  if [[ $branch == "default" ]]; then
    git clone -q --depth 1 https://github.com/"$url" "$location"
  else
    git clone -q https://github.com/"$url" "$location"
    runCommandFromDirectory "$location" "git checkout $branch"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Recursively remove directory if present.

removeDirIfPresent() {
  if [[ -d "$1" ]]; then
    echo "Removed $1"
    rm -rf "$1"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Delete NvimApp from $HOME/.config directory

deleteNvimApp() {
  for fields in "${neovim_distros[@]}"; do
    IFS=$'|' read -r alias url branch <<<"$fields"

    alias="$(removeSpaces "$alias")"
    if [[ "$1" == "$alias" ]]; then
      echo "Deleting nvim-$alias if required."

      removeDirIfPresent "$HOME/.config/nvim-$alias"
      removeDirIfPresent "$HOME/.cache/nvim-$alias"
      removeDirIfPresent "$HOME/.local/share/nvim-$alias"
      removeDirIfPresent "$HOME/.local/state/nvim-$alias"
      deleteAliasIfExists $alias
      return
    fi
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ Reset NvimApp from $HOME/.config directory

resetNvimApp() {
  for fields in "${neovim_distros[@]}"; do
    IFS=$'|' read -r alias url branch <<<"$fields"

    alias="$(removeSpaces "$alias")"
    if [[ "$1" == "$alias" ]]; then
      echo "Resetting nvim-$alias if required."

      removeDirIfPresent "$HOME/.cache/nvim-$alias"
      removeDirIfPresent "$HOME/.local/share/nvim-$alias"
      removeDirIfPresent "$HOME/.local/state/nvim-$alias"
      return
    fi
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ Run a command from another directory.

runCommandFromDirectory() {
  location="$1"
  command="$2"

  cd "$location" || return

  if [[ "$(runCommandCheck "$command")" == true ]]; then
    echo "$command"
    $command
  fi

  toWorkingDirectory
}

# -------------------------------------------------------------------------- }}}
# {{{ Avoid unnecessary pull commands.

runCommandCheck() {
  local command="$1"
  run_command=true

  if [[ "$command" == "git pull" ]]; then
    if [[ "$(gitcheck)" != "Need-to-Pull" ]]; then
      run_command=false
    fi
  fi

  echo "$run_command"
}

# -------------------------------------------------------------------------- }}}
# {{{ Move to working directory.

toWorkingDirectory() {
  cd "$dir" || (echo "Returning to working directory failed." && exit)
}

# -------------------------------------------------------------------------- }}}
# {{{ Write neovim aliases to a file that can be sourced.

writeAliasesFile() {
  local choice="$1"
  if [[ ! -d "$nvimscfg" ]]; then
    echo "Creating $nvimscfg directory."
    mkdir -p $nvimscfg
  fi

  if [[ ! -f "$nvimAppNameFile" ]]; then
    echo "Writing $nvimAppNameFile"
    echo "#!/bin/bash" >"$nvimAppNameFile"
    echo "# NVIM_APPNAME " >>"$nvimAppNameFile"
  fi

  writeAliasIfNotExists $choice
}

# -------------------------------------------------------------------------- }}}
# {{{ Write the alias if it doesn't exist

writeAliasIfNotExists() {
  local choice="$1"
  local alias_line="alias nvim-$choice=\"NVIM_APPNAME=nvim-$choice nvim\""

  # Check if the line already exists in the file.
  if ! grep -Fxq "$alias_line" "$nvimAppNameFile"; then
    echo "$alias_line" >>"$nvimAppNameFile"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Delete the alias if it exist

deleteAliasIfExists() {
  local choice="$1"
  local alias_line="alias nvim-$choice=\"NVIM_APPNAME=nvim-$choice nvim\""

  # Check if the line exists in the file
  if grep -Fxq "$alias_line" "$nvimAppNameFile"; then
    sed -i "/$alias_line/d" "$nvimAppNameFile"
    echo "Alias deleted from $nvimAppNameFile"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Select Neovim app to switch to.

selectNeovimApp() {
  config=$(
    printf "%s\n" "${nvapps[@]}" |
      fzf --prompt=" Neovim Config 󰐊" \
          --height=35% \
          --layout=reverse \
          --border \
          --exit-0
  )

  echo "$config"
}

# -------------------------------------------------------------------------- }}}
# {{{ Get command line arguments.
#
#    Note: nvims process only one command line argument.  That was a design
#    choice.

#     d : delete nvimapp selected
#     r : reset nvimapp selected
#     s : set default nvimapp selected
#     h || invalid : display usage
#     Normal nvims operation for anything else

deleteNvimAppFlag=false
resetNvimAppFlag=false
setDefaultFlag=false
while getopts 'drhs' option; do
  case "$option" in
  d)
    deleteNvimAppFlag=true
    ;;
  r)
    resetNvimAppFlag=true
    ;;
  s)
    setDefaultFlag=true
    ;;
  h)
    printf "Usage: nvims [] [-d] [-r] [-s] [-h]\n"
    printf " [ ] - Display nvim selection list.\n"
    printf " [d] - Delete selected nvimapp installation.\n"
    printf " [r] - Reset selected nvimapp installation.\n"
    printf " [s] - Set selected nvimapp as nvims default.\n"
    printf " [h] - Display this message.\n"
    exit 1
    ;;
  *)
    printf "Usage: nvims [] [-d] [-r] [-s] [-h]\n"
    printf " [ ] - Display nvim selection list.\n"
    printf " [d] - Delete selected nvimapp installation.\n"
    printf " [r] - Reset selected nvimapp installation.\n"
    printf " [s] - Set selected nvimapp as nvims default.\n"
    printf " [h] - Display this message.\n"
    exit 1
    ;;
  esac
done

# -- ----------------------------------------------------------------------- }}}
# {{{ Main logic
main() {
  # Save current working directory.
  local dir=$(pwd)

  # Source configuration files.
  sourceFiles

  # Build neovim app array and let the user make a choice.
  buildNeovimAppArray
  local choice="$(selectNeovimApp)"

  # The User may exit by pressing Ctrl-C.
  if [[ -z $choice ]]; then
    echo "Ctrl-C pressed. Exiting." && exit
  fi

  # default is one of the Neovim distribution nvim provides.  Normally, this
  # means nvim will launch Neovim similar to using "nvim -u NORC".  This changes
  # when nvim -s is used.  Firstly, $defaultNeovimDistro is written to with your
  # desired default. Secondly, when you run nvims and select "default", nvims
  # will figure use your default.
  if [[ $choice == "default" ]]; then
    if [[ -s "$defaultNeovimDistro" ]]; then
      local default=$(cat "$defaultNeovimDistro")
      if [[ -n "$default" ]]; then
        choice="$default"
      fi
    fi
  fi

  # nvims will not launch Neovim when the delete option has been selected.
  local writeAlias=true
  local cloneOrPull=true
  local runNeovim=true

  # nvim -d used to delete an existing distribution when it exists.
  if [[ $deleteNvimAppFlag == true ]]; then
    deleteNvimApp "$choice"
    writeAlias=false
    cloneOrPull=false
    runNeovim=false

  # nvim -r used to reset an existing distribution when it exists.
  elif [[ $resetNvimAppFlag == true ]]; then
    resetNvimApp "$choice"
    writeAlias=false
    cloneOrPull=false

  # nvim -s used to set the default distribution .
  elif [[ $setDefaultFlag == true ]]; then
    setDefaultNvimApp "$choice"
  fi

  # Write the alias file when needed.
  [[ $writeAlias == true ]]  && writeAliasesFile "$choice"

  # Clone or pull neovim repository when needed.
  [[ $cloneOrPull == true ]] && cloneOrPullNeovimApp "$choice"

  # Finally, run neovim.
  [[ $runNeovim == true ]]   && NVIM_APPNAME="nvim-$choice" nvim
}

# -------------------------------------------------------------------------- }}}
main "$@"

#!/usr/bin/env bash
# {{{ Define file locations and internal arrays.

# location nvims reads and writes its configuration files.
readonly nvimscfg="$HOME/.config/nvims"

# Custom neovim distribution nvims can bootstrap.
readonly neovimDistros=$nvimscfg/neovim_distros

# nvims writes aliases nvim-{disto} names it has installed.
# You should source this file from your shell to have immediate access to the
# aliases nvims creates.
readonly nvimAppNameFile=$nvimscfg/nvim_appnames

# nvims allows one to configure a default distribution.
readonly defaultNeovimDistro=$nvimscfg/nvim_default_app

# nvapp names extracted from neovim_distros array.
nvapps=()

# -------------------------------------------------------------------------- }}}
# {{{ Source configuration files.

sourceFiles() {
  [[ ! -f $neovimDistros ]] && echo "Missing $neovimDistros" && exit
  source "$neovimDistros"
}

# -------------------------------------------------------------------------- }}}
# {{{ Determine if a pull is needed.

# shellcheck disable=SC2120
gitcheck() {

  # Git variables used to determine if a pull is needed.
  git fetch
  upstream=${1:-'@{u}'}
  local=$(git rev-parse @)
  remote=$(git rev-parse "$upstream")
  base=$(git merge-base @ "$upstream")

  if [[ "$local" == "$remote" ]]; then
    echo "Up-to-date"
  elif [[ "$remote" == "$base" ]]; then
    echo "Need-to-Push"
  elif [[ "$local" == "$base" ]]; then
    echo "Need-to-Pull"
  else
    echo "Diverged"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Remove all spaces from parameter 1.

removeSpaces() {
  var="$(echo -e "$1" | tr -d '[:space:]')"
  echo "$var"
}

# -------------------------------------------------------------------------- }}}
# {{{ Build neovim_app array.

buildNeovimAppArray() {
  nvapps=()
  for fields in "${neovim_distros[@]}"; do
    IFS=$'|' read -r alias _sn _url _branch <<<"$fields"
    alias="$(removeSpaces "$alias")"
    nvapps+=("$alias")
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ Extract fields from neovim_distros based on user choice.

extractNeovimAppFields() {
  local choice="$1"
  for fields in "${neovim_distros[@]}"; do
    IFS=$'|' read -r alias sn url branch <<<"$fields"
    alias="$(removeSpaces "$alias")"

    if [[ "$choice" == "$alias" ]]; then
      sn="$(removeSpaces "$sn")"
      url="$(removeSpaces "$url")"
      branch="$(removeSpaces "$branch")"

      # Set global variables
      selected_alias="$alias"
      selected_sn="$sn"
      selected_url="$url"
      selected_branch="$branch"
      selected_location=$HOME/.config/nvim-$selected_alias
      selected_alias_line="alias nvim-$selected_alias=\"NVIM_APPNAME=nvim-$selected_alias nvim\""
      selected_sn_line="alias $selected_alias=nvim-$selected_alias"
      return
    fi
  done

  # If no match found, reset globals and return error
  selected_alias=""
  selected_sn=""
  selected_url=""
  selected_branch=""
  selected_location=""
  selected_alias_line=""
  selected_sn_line=""
  echo "Error: No matching alias found for '$choice'" >&2
  return 1
}

# -------------------------------------------------------------------------- }}}
# {{{ Clone or Pull selected nvapp

cloneOrPullNeovimApp() {
  if [[ -d "$selected_location" ]]; then
    echo "Pulling $selected_alias to $selected_location"
    pullRepository "$selected_alias"
  else
    echo "Cloning $selected_alias to $selected_location"
    cloneRepository "$selected_alias" "$selected_url" "$selected_branch"
  fi
  return
}

# --------------------------------------------------------------------------}}}
# {{{ Set default configuration

setDefaultNvimApp() {
  echo "$selected_alias" >"$defaultNeovimDistro"
}

# -------------------------------------------------------------------------- }}}
# {{{ Pull repository

pullRepository() {
  runCommandFromDirectory "git pull"
}

# -------------------------------------------------------------------------- }}}
# {{{ Clone Repository

cloneRepository() {

  # Clear clone depth when a branch is needed.
  if [[ $selected_branch == "default" ]]; then
    git clone -q --depth 1 https://github.com/"$selected_url" "$selected_location"
  else
    git clone -q https://github.com/"$selected_url" "$selected_location"
    runCommandFromDirectory "git checkout $selected_branch"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Recursively remove directory if present.

removeDirIfPresent() {
  local directory=$1
  if [[ -d "$directory" ]]; then
    echo "Removed $directory"
    rm -rf "$directory"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Delete NvimApp from $HOME/.config directory

deleteNvimApp() {
  echo "Deleting nvim-$selected_alias if required."

  removeDirIfPresent "$HOME/.config/nvim-$selected_alias"
  removeDirIfPresent "$HOME/.cache/nvim-$selected_alias"
  removeDirIfPresent "$HOME/.local/share/nvim-$selected_alias"
  removeDirIfPresent "$HOME/.local/state/nvim-$selected_alias"
  deleteAliasIfExists $selected_alias
}

# -------------------------------------------------------------------------- }}}
# {{{ Reset NvimApp from $HOME/.config directory

resetNvimApp() {
  echo "Resetting nvim-$selected_alias if required."

  removeDirIfPresent "$HOME/.cache/nvim-$selected_alias"
  removeDirIfPresent "$HOME/.local/share/nvim-$selected_alias"
  removeDirIfPresent "$HOME/.local/state/nvim-$selected_alias"
}

# -------------------------------------------------------------------------- }}}
# {{{ Run a command from another directory.

runCommandFromDirectory() {
  command="$1"

  cd "$selected_location" || return

  if [[ "$(runCommandCheck "$command")" == true ]]; then
    echo "$command"
    $command
  fi

  toWorkingDirectory
}

# -------------------------------------------------------------------------- }}}
# {{{ Avoid unnecessary pull commands.

runCommandCheck() {
  local command="$1"
  run_command=true

  if [[ "$command" == "git pull" ]]; then
    if [[ "$(gitcheck)" != "Need-to-Pull" ]]; then
      run_command=false
    fi
  fi

  echo "$run_command"
}

# -------------------------------------------------------------------------- }}}
# {{{ Move to working directory.

toWorkingDirectory() {
  cd "$dir" || (echo "Returning to working directory failed." && exit)
}

# -------------------------------------------------------------------------- }}}
# {{{ Write neovim aliases to a file that can be sourced.

writeAliasesFile() {
  if [[ ! -d "$nvimscfg" ]]; then
    echo "Creating $nvimscfg directory."
    mkdir -p $nvimscfg
  fi

  if [[ ! -f "$nvimAppNameFile" ]]; then
    echo "Writing $nvimAppNameFile"
    echo "#!/bin/bash" >"$nvimAppNameFile"
    echo "# NVIM_APPNAME " >>"$nvimAppNameFile"
  fi

  writeAliasIfNotExists
}

# -------------------------------------------------------------------------- }}}
# {{{ Write the alias if it doesn't exist

writeAliasIfNotExists() {

  # Check if the alias line already exists in the file.
  if [[ -z $(grep -Fx "$selected_alias_line" "$nvimAppNameFile") ]]; then
    echo "$selected_alias_line" >>"$nvimAppNameFile"
    echo "Wrote '$selected_alias_line' to $nvimAppNameFile"
  else
    echo "Alias '$selected_alias_line' already exists in $nvimAppNameFile"
  fi

  # Check if the short name alias line exists in the file.
  if [[ $selected_sn == "true" ]]; then
    if [[ -z $(grep -Fx "$selected_sn_line" "$nvimAppNameFile") ]]; then
      echo "$selected_sn_line" >>"$nvimAppNameFile"
      echo "Wrote '$selected_sn_line' to $nvimAppNameFile"
    else
      echo "Alias '$selected_sn_line' already exists in $nvimAppNameFile"
    fi
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Delete the alias if it exist
deleteAliasIfExists() {
  # Check if the alias line exists in the file
  if [[ -n $(grep -Fx "$selected_alias_line" "$nvimAppNameFile") ]]; then
    sed -i "/$selected_alias_line/d" "$nvimAppNameFile"
    echo "Deleted '$selected_alias_line' from $nvimAppNameFile"
  else
    echo "Did not delete '$selected_alias_line' from $nvimAppNameFile"
  fi

  # Check if the short name alias line exists in the file.
  if [[ $selected_sn == "true" ]]; then
    if [[ -n $(grep -Fx "$selected_sn_line" "$nvimAppNameFile") ]]; then
      sed -i "/$selected_sn_line/d" "$nvimAppNameFile"
      echo "Deleted '$selected_sn_line' from $nvimAppNameFile"
    else
      echo "Did not delete '$selected_sn_line' from $nvimAppNameFile"
    fi
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Select Neovim app to switch to.

selectNeovimApp() {
  local choice=$(
  printf "%s\n" "${nvapps[@]}" |
    fzf --prompt=" Neovim Config 󰐊" \
    --height=35% \
    --layout=reverse \
    --border \
    --exit-0
  )

  echo "$choice"
}

# -------------------------------------------------------------------------- }}}
# {{{ Get command line arguments.
#
#    Note: nvims process only one command line argument.  That was a design
#    choice.

#     d : delete nvimapp selected
#     r : reset nvimapp selected
#     s : set default nvimapp selected
#     h || invalid : display usage
#     Normal nvims operation for anything else

deleteNvimAppFlag=false
resetNvimAppFlag=false
setDefaultFlag=false
while getopts 'drhs' option; do
  case "$option" in
    d)
      deleteNvimAppFlag=true
      ;;
    r)
      resetNvimAppFlag=true
      ;;
    s)
      setDefaultFlag=true
      ;;
    h)
      printf "Usage: nvims [] [-d] [-r] [-s] [-h]\n"
      printf " [ ] - Display nvim selection list.\n"
      printf " [d] - Delete selected nvimapp installation.\n"
      printf " [r] - Reset selected nvimapp installation.\n"
      printf " [s] - Set selected nvimapp as nvims default.\n"
      printf " [h] - Display this message.\n"
      exit 1
      ;;
    *)
      printf "Usage: nvims [] [-d] [-r] [-s] [-h]\n"
      printf " [ ] - Display nvim selection list.\n"
      printf " [d] - Delete selected nvimapp installation.\n"
      printf " [r] - Reset selected nvimapp installation.\n"
      printf " [s] - Set selected nvimapp as nvims default.\n"
      printf " [h] - Display this message.\n"
      exit 1
      ;;
  esac
done

# -- ----------------------------------------------------------------------- }}}
# {{{ Main logic
main() {
  # Save current working directory.
  local dir=$(pwd)

  # Source configuration files.
  sourceFiles

  # Build neovim app array and let the user make a choice.
  buildNeovimAppArray
  local choice="$(selectNeovimApp)"

  # The User may exit by pressing Ctrl-C.
  if [[ -z $choice ]]; then
    echo "Ctrl-C pressed. Exiting." && exit
  fi

  # default is one of the Neovim distribution nvims provides.  Normally, this
  # means nvims will launch Neovim similar to using "nvim -u NORC".  This changes
  # when nvims -s is used.  Firstly, $defaultNeovimDistro is written to with your
  # desired default. Secondly, when you run nvims and select "default", nvims
  # will set $choice to $defaultNeovimDistro.
  if [[ $choice == "default" ]]; then
    if [[ -s "$defaultNeovimDistro" ]]; then
      local default=$(cat "$defaultNeovimDistro")
      if [[ -n "$default" ]]; then
        choice="$default"
      fi
    fi
  fi

  # Use choice to extract all fields for.
  extractNeovimAppFields "$choice"

  # nvims will not launch Neovim when the delete option has been selected.
  local writeAlias=true
  local cloneOrPull=true
  local runNeovim=true

  # nvim -d used to delete an existing distribution when it exists.
  if [[ $deleteNvimAppFlag == true ]]; then
    deleteNvimApp "$choice"
    writeAlias=false
    cloneOrPull=false
    runNeovim=false

  # nvim -r used to reset an existing distribution when it exists.
  elif [[ $resetNvimAppFlag == true ]]; then
    resetNvimApp "$choice"
    writeAlias=false
    cloneOrPull=false

    # nvim -s used to set the default distribution .
  elif [[ $setDefaultFlag == true ]]; then
    setDefaultNvimApp "$choice"
  fi

  # Write the alias file when needed.
  [[ $writeAlias == true ]]  && writeAliasesFile

  # Clone or pull neovim repository when needed.
  [[ $cloneOrPull == true ]] && cloneOrPullNeovimApp

  # Finally, run neovim.
  [[ $runNeovim == true ]]   && NVIM_APPNAME="nvim-$choice" nvim
}

# -------------------------------------------------------------------------- }}}
main "$@"
